/** @author Kevin A George
 *  Example to illustrate a skip list.
 *  Whenever possible, it is better to use data structures from Java's library.
 *  This program is an assignment.
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Iterator;
import java.util.Random;
import java.util.Scanner;

//Driver program and the skeleton for the skip list implementation.

public class SkipListImpl<T extends Comparable<? super T>> implements
		SkipList<T> {

	public Node<T> head, tail;
	public int maxlevel = 19, size = 0; // Maxlevel is the maximum level of head
										// and tail and is initially set to 19

	// public Node<T>[] prev;

	public SkipListImpl() // constructor
	{
		head = new Node<T>(null, maxlevel); // Initialing head as left most base
											// node
		tail = new Node<T>(null, maxlevel); // Initializing right most base node
											// as tail
		for (int i = 0; i <= maxlevel; i++) {
			head.next[i] = tail;
		}

	}

	public static void main(String[] args) {

		Scanner sc = null;

		if (args.length > 0) {
			File file = new File(args[0]);
			try {
				sc = new Scanner(file);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		} else {
			sc = new Scanner(System.in);
		}
		String operation = "";
		long operand = 0;
		int modValue = 997;
		long result = 0;
		Long returnValue = null;
		SkipListImpl<Long> skipList = new SkipListImpl<Long>();
		// Initialize the timer
		long startTime = System.currentTimeMillis();

		while (!((operation = sc.next()).equals("End"))) {
			switch (operation) {
			case "Add": {
				operand = sc.nextLong();
				skipList.add(operand);
				result = (result + 1) % modValue;
				break;
			}
			case "Ceiling": {
				operand = sc.nextLong();
				returnValue = skipList.ceiling(operand);
				if (returnValue != null) {
					result = (result + returnValue) % modValue;
				}
				break;
			}
			case "FindIndex": {
				int intOperand = sc.nextInt();
				returnValue = skipList.findIndex(intOperand);
				if (returnValue != null) {
					result = (result + returnValue) % modValue;
				}
				break;
			}
			case "First": {
				returnValue = skipList.first();
				if (returnValue != null) {
					result = (result + returnValue) % modValue;
				}
				break;
			}
			case "Last": {
				returnValue = skipList.last();
				if (returnValue != null) {
					result = (result + returnValue) % modValue;
				}
				break;
			}
			case "Floor": {
				operand = sc.nextLong();
				returnValue = skipList.floor(operand);
				if (returnValue != null) {
					result = (result + returnValue) % modValue;
				}
				break;
			}
			case "Remove": {
				operand = sc.nextLong();
				if (skipList.remove(operand)) {
					result = (result + 1) % modValue;
				}
				break;
			}

			case "Contains": {
				operand = sc.nextLong();
				if (skipList.contains(operand)) {
					result = (result + 1) % modValue;
				}
				break;
			}
			}
		}

		// End Time
		long endTime = System.currentTimeMillis();
		long elapsedTime = endTime - startTime;

		System.out.println(result + " " + elapsedTime);

	}

	public class Node<T> /* Node structure of each node */
	{
		T data;
		Node<T> next[];
		int level;

		Node() {
			data = null;
			next = null;
		}

		Node(T x, int level) // Constructor
		{
			data = x;
			next = (Node<T>[]) new Node[level + 1];
		}

	}

	// This method returns the path to each node
	public Node<T>[] Find(T x) {
		Node<T> p;
		p = head;
		Node<T>[] prev;
		prev = (Node<T>[]) new Node[maxlevel + 1];

		for (int i = maxlevel; i >= 0; i--) {

			while (p.next[i].data != null && p.next[i].data.compareTo(x) < 0) // checks whether next element is null or greater than
																				// to exit loop
			{
				p = p.next[i];
			}
			prev[i] = p;
		}
		return prev;
	}

	// --------------------Override methods----------------------------------
	@Override
	public void add(T x) // Add an element x to the list.
	{
		int level;
		Node<T> n;
		Node<T> prev[];
		Boolean value;

		if (size == 0) // check if skip list is empty or not
		{
			level = choice(maxlevel);
			n = new Node<T>(x, level);

			for (int i = 0; i <= level; i++) // This for loop adds the first
												// item
												// to skip list
			{
				n.next[i] = head.next[i];
				head.next[i] = n;
			}
			size++;
		} else {
			prev = Find(x);
			if (prev == null)
				try {
					throw new Exception("Element Already there");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			if (x.equals(prev[0].next[0].data)) // Check whether element is
												// already present . Then it is
												// not added again.
			{
				return; // item already present there
			}

			else {

				level = choice(maxlevel);
				n = new Node<T>(x, level); // Create a new node with level value

				for (int i = 0; i <= level; i++) // This loop adds the new
													// element into the list
				{
					n.next[i] = prev[i].next[i];
					prev[i].next[i] = n;
				}

				size++;

			}

		}

	}

	public int choice(int maxlevel) // This method returns the level of a newly
									// created node
	{
		int l = 0, b;

		while (l < maxlevel) // Max level is initially set to a value. Each time
								// random outputs 0 or 1.
		{
			Random rand = new Random();
			b = rand.nextInt(2);
			if (b == 1)
				l++;
			else
				break;
		}

		return l;
	}

	@Override
	public T ceiling(T x) // Least element that is >= x, or null if no such
							// element
	{
		Node<T> current[] = (Node<T>[]) new Node[maxlevel + 1];
		Node<T> prev[];
		prev = Find(x);
		
		if (x.equals(prev[0].next[0].data)) // Checking If the next value in
											// prev[0] is equal to data we
		{								// are searching or not)
			for (int i = 0; i < maxlevel; i++)
			{ 										// assigns current pointer to
													// the element to be deleted
				if (x.equals(prev[i].next[i].data))
				{
					current[i] = prev[i].next[i];
				}
			}
			return current[0].next[0].data;
		}	
		else
			return null;
	}

	@Override
	public boolean contains(T x) // If x in the list,returns 1. Else null
	{

		Node<T> prev[]; // Variable to store the prev array

		prev = Find(x); // Calling find and getting prev array as return value

		if (prev == null) // Checking if prev is equal to null or not
			try {
				throw new Exception("The entered value not found");

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return false;
			}
		else {
			if (x.equals(prev[0].next[0].data)) // Checking If the next value in
												// prev[0] is equal to data we
												// are searching or not
				return true;
			else
				return false;
		}

	}

	@Override
	// Return the element at index n in the list
	public T findIndex(int n) {
		Node<T> p = head;

		for (int i = 0; i < n; i++) // Traverses in the lower level until n is reached
		{
			if (p.next[0] != null)
				p = p.next[0];
			else
				return null;
		}

		if (p.data == null)
			return null;
		else
			return p.data;
	}

	@Override
	public T first() // Return the first element of the list
	{
		Boolean value = isEmpty();
		if (value)
			try {
				throw new Exception("Empty list");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		else {
			return head.next[0].data; // head.next will be the first element
		}
		return null;
	}

	@Override
	public T floor(T x) // Greatest element that is <= x, or null if no such
						// element
	{

		Node<T> prev[];
		prev =Find(x);
		
		if (x.equals(prev[0].next[0].data)) // Checking If the next value in
											// prev[0] is equal to data we
		{ 									// are searching or not)
			return prev[0].data;
		} 
		else
			return null;
	}

	@Override
	// Is the list empty?
	public boolean isEmpty() {
		if (head.next[0] == tail)
			return true;
		else
			return false;
	}

	@Override
	public Iterator<T> iterator() {
		return null;
	}

	@Override
	// Return the last element of the list
	public T last() {
		Node<T> p;
		p = head;

		for (int i = maxlevel; i >= 0; i--) {

			while (p.next[i].data != null) { // traverses till end of skip list
				p = p.next[i];
			}
		}
		return p.data;
	}

	@Override
	public void rebuild() {

	}

	/*
	 * Remove x from this list and returns true ; returns false if x is not in
	 * list
	 */
	@Override
	public boolean remove(T x) {
		Node<T> current[] = (Node<T>[]) new Node[maxlevel + 1];
		Node<T> prev[];

		prev = Find(x); // Array prev contains the path to the node.
		if (x.equals(prev[0].next[0].data)) // Check whether element is
		// present . Then it is removed

		{
			for (int i = 0; i < maxlevel; i++) { // assigns current pointer to
													// the element to be deleted
				if (x.equals(prev[i].next[i].data)) {
					current[i] = prev[i].next[i];
				}
			}
			for (int i = 0; i <= maxlevel; i++) { // cuts the current element by
													// connecting prev and next
				if (prev[i].next[i].equals(current[i])) {
					prev[i].next[i] = current[i].next[i];
				} else
					break;
			}
			return true; // Successful deletion
		} else // Element not present in list
		{
			return false;
		}

	}

	@Override
	public int size() // Number of elements in the list
	{
		return size;
	}
	// --------------------Override methods----------------------------------
}
